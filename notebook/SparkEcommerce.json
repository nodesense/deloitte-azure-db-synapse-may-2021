{
	"name": "SparkEcommerce",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a9f48976-4ae6-40bb-965e-4bf3a6de9db9/resourceGroups/Training/providers/Microsoft.Synapse/workspaces/deloittesynapase/bigDataPools/SparkPool",
				"name": "SparkPool",
				"type": "Spark",
				"endpoint": "https://deloittesynapase.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import DoubleType,StructType, StringType, IntegerType, DateType\r\n",
					"import pyspark.sql.functions as F\r\n",
					"\r\n",
					"schema = StructType() \\\r\n",
					"         .add(\"InvoiceNo\", StringType(), True) \\\r\n",
					"         .add(\"StockCode\", StringType(), True) \\\r\n",
					"         .add(\"Description\", StringType(), True) \\\r\n",
					"         .add(\"Quantity\", IntegerType(), True) \\\r\n",
					"         .add(\"InvoiceDate\", DateType(), True) \\\r\n",
					"         .add(\"UnitPrice\", DoubleType(), True) \\\r\n",
					"         .add(\"CustomerID\", IntegerType(), True) \\\r\n",
					"         .add(\"Country\", StringType(), True)\r\n",
					"\r\n",
					"# Blob File API\r\n",
					"input_path = \"abfss://ecommerce@deloittesynapasestorage.dfs.core.windows.net/raw\"\r\n",
					"\r\n",
					"dataSet = spark.read.format(\"csv\") \\\r\n",
					"                .option(\"header\", True) \\\r\n",
					"                .schema(schema) \\\r\n",
					"                .option(\"dateFormat\", \"MM/dd/yyyy HH:mm\")\\\r\n",
					"                .load(input_path)\r\n",
					"                \r\n",
					"dataSet.printSchema()\r\n",
					"dataSet.show(2)"
				],
				"attachments": null,
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"ecommerceDF = dataSet\\\r\n",
					"       .filter(\"Quantity IS NOT NULL\")\\\r\n",
					"       .filter(\"UnitPrice IS NOT NULL\")\\\r\n",
					"       .filter(\"InvoiceNo IS NOT NULL\")\\\r\n",
					"       .filter(\"Country IS NOT NULL\")\r\n",
					"\r\n",
					""
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# copy the content as parquet into a folder, with default paritions\r\n",
					"output_path =  \"abfss://ecommerce@deloittesynapasestorage.dfs.core.windows.net/parquet-default-partitions\"\r\n",
					"\r\n",
					"ecommerceDF.write.mode(\"overwrite\").parquet(output_path)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# coalesce , reduce the partitions\r\n",
					"output_path =  \"abfss://ecommerce@deloittesynapasestorage.dfs.core.windows.net/parquet-one-partition\"\r\n",
					"# all data shall be moved into 1 parition, then the final 1 partition is written to storage\r\n",
					"ecommerceDF.coalesce(1).write.mode(\"overwrite\").parquet(output_path)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"ecommerceDF.select(\"Country\").distinct().show(100)\r\n",
					"\r\n",
					"output_path =  \"abfss://ecommerce@deloittesynapasestorage.dfs.core.windows.net/parquet-countries\"\r\n",
					"\r\n",
					"# write the DF into blob storage with partition by Country, this will create many folders\r\n",
					"# as per country code, place the content in respective country\r\n",
					"ecommerceDF.write.partitionBy(\"Country\").mode(\"overwrite\").parquet(output_path)\r\n",
					""
				],
				"attachments": null,
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# ecommerceDF.select(\"InvoiceDate\").distinct().show(100)\r\n",
					"\r\n",
					"ecommerceWithDatesDF = ecommerceDF\\\r\n",
					"                       .withColumn(\"Year\", F.year(\"InvoiceDate\"))\\\r\n",
					"                       .withColumn(\"Month\", F.month(\"InvoiceDate\"))\\\r\n",
					"                       .withColumn(\"Day\", F.dayofmonth(\"InvoiceDate\"))\r\n",
					"\r\n",
					" \r\n",
					"ecommerceWithDatesDF.printSchema()\r\n",
					"\r\n",
					"output_path =  \"abfss://ecommerce@deloittesynapasestorage.dfs.core.windows.net/parquet-dates\"\r\n",
					"\r\n",
					"\r\n",
					"# write the DF into blob storage with partition by \"Year\", \"Month\", \"Day\", this will create many folders\r\n",
					"# as per country code, place the content in respective \"Year\", \"Month\", \"Day\"\r\n",
					"ecommerceWithDatesDF.coalesce(1).write.partitionBy(\"Year\", \"Month\", \"Day\").mode(\"overwrite\").parquet(output_path)\r\n",
					"\r\n",
					"\r\n",
					"output_path =  \"abfss://ecommerce@deloittesynapasestorage.dfs.core.windows.net/parquet-country-dates\"\r\n",
					"\r\n",
					"\r\n",
					"# write the DF into blob storage with partition by Country,, \"Year\", \"Month\", \"Day\"\r\n",
					"# as per country code, place the content in respective country, \"Year\", \"Month\", \"Day\"\r\n",
					"ecommerceWithDatesDF.coalesce(1).write.partitionBy(\"Country\", \"Year\", \"Month\", \"Day\").mode(\"overwrite\").parquet(output_path)\r\n",
					""
				],
				"attachments": null,
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					""
				],
				"attachments": null,
				"execution_count": null
			}
		]
	}
}