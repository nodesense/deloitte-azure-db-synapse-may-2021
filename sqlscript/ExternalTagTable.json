{
	"name": "ExternalTagTable",
	"properties": {
		"content": {
			"query": "-- serverless sql pool \n-- while quering, it allocate resource, we pay for amount of data processed. \n\n-- meta data  - is managed by synapse\n\n-- unmanaged table , is managed by you, or ETL, or apps\n\n-- if you want to add records,  you dump a csv/parquet/json files into target folder\n-- if you want to remove, you remove the files/folder in the target folder\n-- if you want to update it, replace the file with new file..\n\n-- done already\n\nCREATE DATABASE moviedb; \n\n-- To select movie db use below statement, or use the UI, top side, use database select box\nUSE moviedb; \n\n\n-- 1. We have file formats..\n-- 2. integrated data source - contains location details of the data/blob/storage account/containers\n-- 3. The meta data table, external table\n-- 4. data itself in rest in lake\n\n\n-- 1. We have file formats..DEFINE FORMAT, csv format\n\nCREATE EXTERNAL FILE FORMAT [ExternalCSVWithHeader] \n                WITH (\n                    FORMAT_TYPE = DELIMITEDTEXT,\n                    FORMAT_OPTIONS (FIELD_TERMINATOR=',', FIRST_ROW=2)\n                )\n\n-- to check whether external file format created or not..\n\nSELECT * from sys.external_file_formats;\n\n\n-- 2. integrated data source - contains location details of the data/blob/storage account/containers\n-- DEFINE THE DATA SOURCE , in a Blob storage account\n\n-- if we have ADLS, we have two options, go by File API/DFS, BLOB Storage API\n-- file api, DFS api\n\n-- storage account deloittesynapasestorage\n-- container movieset\n-- abfs - Azure Blob File System / No  TLS\n-- abfss - Azure Blob File System Secured /TLS\n\nCREATE EXTERNAL DATA SOURCE [tags_ds]\n  WITH (LOCATION='abfss://movieset@deloittesynapasestorage.dfs.core.windows.net')\n\nSELECT * from sys.external_data_sources;\n\n\n-- 3. The meta data table, external table\n-- create external table, schema located in sql serverless + data located in lake\n-- define a structure for data lake file as table, useful for query, join, projection...\n-- data always maanged externally by  you or tool not by Synapse\n\n-- userId,movieId,tag,timestamp\n\nCREATE EXTERNAL TABLE tags (\n    userId INT,\n    movieId INT,\n    tag VARCHAR(256),\n    timestamp BIGINT\n) WITH (\n    -- location/path within data source\n    LOCATION='tags/tags.csv',\n    -- data source has container name, storage account\n    DATA_SOURCE = [tags_ds],\n    FILE_FORMAT = [ExternalCSVWithHeader]\n);\n\nSELECT * from tags;\n\n\n-- NOT SUPPORTED\n--ALTER EXTERNAL DATA SOURCE [tags_ds] SET \n--    LOCATION='abfss://movieset@deloittesynapasestorage.dfs.core.windows.net'\n\n\n-- DROP EXTERNAL TABLE table_name;\n-- DROP EXTERNAL DATA SOURCE [datasource_name];\n-- DROP EXTERNAL FILE  FORMAT [external_format_name];\n\n\nCREATE EXTERNAL DATA SOURCE [movieset_ds]\n  WITH (LOCATION='abfss://movieset@deloittesynapasestorage.dfs.core.windows.net')\n\nSELECT * from sys.external_data_sources;\n\n-- links movieId,imdbId,tmdbId\n\nCREATE EXTERNAL TABLE links (\n    movieId INT,\n    imdbId INT,\n    tmdbId INT\n) WITH (\n    -- location/path within data source, point to directory, not a specific file\n    LOCATION='links/',\n    -- data source has container name, storage account\n    DATA_SOURCE = [movieset_ds],\n    FILE_FORMAT = [ExternalCSVWithHeader]\n);\n\nSELECT * FROM links;\n\n-- movies: movieId,title,genres\n\nCREATE EXTERNAL TABLE movies (\n    movieId INT,\n    title VARCHAR(256),\n    genres VARCHAR(256)\n) WITH (\n    -- location/path within data source, point to directory, not a specific file\n    LOCATION='movies/',\n    -- data source has container name, storage account\n    DATA_SOURCE = [movieset_ds],\n    FILE_FORMAT = [ExternalCSVWithHeader]\n);\n\nSELECT * FROM movies;\n\n -- ratings: userId,movieId,rating,timestamp\n\n\nCREATE EXTERNAL TABLE ratings (\n    userId INT,\n    movieId INT,\n    rating FLOAT,\n    timestamp BIGINT \n) WITH (\n    -- location/path within data source, point to directory, not a specific file\n    LOCATION='ratings/',\n    -- data source has container name, storage account\n    DATA_SOURCE = [movieset_ds],\n    FILE_FORMAT = [ExternalCSVWithHeader]\n);\n\nSELECT * FROM ratings;\n\n-- DATA LAKE, SCHEMA STRUCTURE, DATA READY\n-- OLAP - Online Analytics Processing using Serverless SQL Pool\n\nSELECT TOP 10 * from movies;\n\nSELECT TOP 10 UPPER(title) from movies;\n\n-- select expression\nSELECT movieId, rating, (rating + .02) as adj_rating from ratings; \n\n-- group by , ROLLUP\n\nROLLUP (country, state, store)\n\n -- combination \n\n-- USA,CO,WALLMART1\n-- USA,CO,NULL\n-- USA,NULL,NULL\n-- NULL,NULL,NULL\n\nSELECT movieId, COUNT(userId) AS total_voting, AVG(rating) AS avg_rating FROM ratings GROUP BY ROLLUP (movieId);\n\nSELECT movieId, COUNT(userId) AS total_voting, AVG(rating) AS avg_rating FROM ratings GROUP BY (movieId);\n\n-- where for normal filter without aggregation\n\nSELECT movieId, rating from ratings where rating < 1.0;\n\n\n-- HAVING applying condition on aggregated columns\n\nSELECT movieId, COUNT(userId) AS total_voting, AVG(rating) AS avg_rating \nFROM ratings \nGROUP BY (movieId)\nHAVING COUNT(userId) >= 100;\n\n\n-- GROUP BY, HAVING, ORDER BY \nSELECT movieId, COUNT(userId) AS total_voting, AVG(rating) AS avg_rating \nFROM ratings \nGROUP BY (movieId)\nHAVING COUNT(userId) >= 100\nORDER BY total_voting DESC;\n\n\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"poolName": "Built-in",
				"databaseName": "moviedb"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}